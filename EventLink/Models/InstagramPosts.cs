// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EventLink;
//
//    var instagramPosts = InstagramPosts.FromJson(jsonString);

namespace EventLink
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Text.Json.Serialization;
    using System.Text.Json;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class InstagramPosts
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("shortCode")]
        public string ShortCode { get; set; }

        [JsonProperty("caption")]
        public string Caption { get; set; }

        [JsonProperty("hashtags")]
        public List<string> Hashtags { get; set; }

        [JsonProperty("mentions")]
        public List<string> Mentions { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("commentsCount")]
        public long CommentsCount { get; set; }

        [JsonProperty("firstComment")]
        public string FirstComment { get; set; }

        [JsonProperty("latestComments")]
        public List<LatestComment> LatestComments { get; set; }

        [JsonProperty("dimensionsHeight")]
        public long DimensionsHeight { get; set; }

        [JsonProperty("dimensionsWidth")]
        public long DimensionsWidth { get; set; }

        [JsonProperty("displayUrl")]
        public Uri DisplayUrl { get; set; }

        [JsonProperty("images")]
        public List<Uri> Images { get; set; }

        [JsonProperty("videoUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri VideoUrl { get; set; }

        [JsonProperty("alt")]
        public object Alt { get; set; }

        [JsonProperty("likesCount")]
        public long LikesCount { get; set; }

        [JsonProperty("videoViewCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? VideoViewCount { get; set; }

        [JsonProperty("videoPlayCount")]
        public long? VideoPlayCount { get; set; }

        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("childPosts")]
        public List<ChildPost> ChildPosts { get; set; }

        [JsonProperty("locationName", NullValueHandling = NullValueHandling.Ignore)]
        public string LocationName { get; set; }

        [JsonProperty("locationId", NullValueHandling = NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(ParseStringConverter))]
        public long? LocationId { get; set; }

        [JsonProperty("ownerFullName")]
        public string OwnerFullName { get; set; }

        [JsonProperty("ownerUsername")]
        public string OwnerUsername { get; set; }

        [JsonProperty("ownerId")]
        [Newtonsoft.Json.JsonConverter(typeof(ParseStringConverter))]
        public long OwnerId { get; set; }

        [JsonProperty("productType", NullValueHandling = NullValueHandling.Ignore)]
        public string ProductType { get; set; }

        [JsonProperty("videoDuration", NullValueHandling = NullValueHandling.Ignore)]
        public double? VideoDuration { get; set; }

        [JsonProperty("isSponsored")]
        public bool IsSponsored { get; set; }

        [JsonProperty("taggedUsers", NullValueHandling = NullValueHandling.Ignore)]
        public List<TaggedUser> TaggedUsers { get; set; }
    }

    public partial class ChildPost
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("shortCode")]
        public string ShortCode { get; set; }

        [JsonProperty("caption")]
        public string Caption { get; set; }

        [JsonProperty("hashtags")]
        public List<object> Hashtags { get; set; }

        [JsonProperty("mentions")]
        public List<object> Mentions { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("commentsCount")]
        public long CommentsCount { get; set; }

        [JsonProperty("firstComment")]
        public string FirstComment { get; set; }

        [JsonProperty("latestComments")]
        public List<object> LatestComments { get; set; }

        [JsonProperty("dimensionsHeight")]
        public long DimensionsHeight { get; set; }

        [JsonProperty("dimensionsWidth")]
        public long DimensionsWidth { get; set; }

        [JsonProperty("displayUrl")]
        public Uri DisplayUrl { get; set; }

        [JsonProperty("images")]
        public List<object> Images { get; set; }

        [JsonProperty("alt")]
        public object Alt { get; set; }

        [JsonProperty("likesCount")]
        public object LikesCount { get; set; }

        [JsonProperty("timestamp")]
        public object Timestamp { get; set; }

        [JsonProperty("childPosts")]
        public List<object> ChildPosts { get; set; }

        [JsonProperty("ownerId")]
        public object OwnerId { get; set; }

        [JsonProperty("taggedUsers", NullValueHandling = NullValueHandling.Ignore)]
        public List<TaggedUser> TaggedUsers { get; set; }
    }

    public partial class TaggedUser
    {
        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("is_verified")]
        public bool IsVerified { get; set; }

        [JsonProperty("profile_pic_url")]
        public Uri ProfilePicUrl { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }
    }

    public partial class LatestComment
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("ownerUsername")]
        public string OwnerUsername { get; set; }

        [JsonProperty("ownerProfilePicUrl")]
        public Uri OwnerProfilePicUrl { get; set; }

        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("likesCount")]
        public long LikesCount { get; set; }

        [JsonProperty("repliesCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? RepliesCount { get; set; }

        [JsonProperty("replies", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Replies { get; set; }
    }

    public enum TypeEnum { Image };

    public partial class InstagramPosts
    {
        public static List<InstagramPosts> FromJson(string json) => JsonConvert.DeserializeObject<List<InstagramPosts>>(json, EventLink.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<InstagramPosts> self) => JsonConvert.SerializeObject(self, EventLink.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : Newtonsoft.Json.JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Image")
            {
                return TypeEnum.Image;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Image)
            {
                serializer.Serialize(writer, "Image");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ParseStringConverter : Newtonsoft.Json.JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
